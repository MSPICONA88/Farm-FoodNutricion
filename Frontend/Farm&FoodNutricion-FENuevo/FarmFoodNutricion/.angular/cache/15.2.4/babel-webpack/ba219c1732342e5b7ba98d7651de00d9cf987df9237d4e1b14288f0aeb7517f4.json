{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UserComponent = class UserComponent {\n  constructor(presService, marcaService, modeloService, router, formBuilder) {\n    this.presService = presService;\n    this.marcaService = marcaService;\n    this.modeloService = modeloService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.formularioGroup = this.formBuilder.group({\n      nombre: ['', [Validators.minLength(3), Validators.maxLength(100), Validators.required]],\n      apellido: ['', [Validators.minLength(3), Validators.maxLength(80), Validators.required]],\n      costoAproximado: [],\n      contacto: ['', [Validators.email, Validators.required]],\n      marcaSeleccionadaId: ['', Validators.required],\n      modeloSeleccionadoId: ['', Validators.required]\n    });\n    this.presupuesto = new Presupuesto();\n    this.subscription.add(this.marcaService.traerMarcas().subscribe({\n      next: listado => {\n        this.marcas = listado;\n      },\n      error: () => {\n        alert('error al obtener marcas');\n      }\n    }));\n    this.formularioGroup.get(\"marcaSeleccionadaId\")?.valueChanges.subscribe(x => {\n      console.log('marca value changed');\n      console.log(x);\n      console.log(this.formularioGroup.get(\"marcaSeleccionadaId\")?.value);\n      this.subscription.add(this.modeloService.getModelos(x).subscribe({\n        next: respuesta => {\n          this.modelos = respuesta;\n        },\n        error: () => {\n          alert('error al comunicarse con la API');\n        }\n      }));\n    });\n  }\n  guardar() {\n    if (this.formularioGroup.valid) {\n      this.subscription.add(this.presService.agregar(this.presupuesto).subscribe({\n        next: () => {\n          this.irAListado();\n        },\n        error: () => {\n          alert('error al guardar');\n        }\n      }));\n    }\n  }\n  cancelar() {\n    this.irAListado();\n  }\n  irAListado() {\n    this.router.navigate(['']);\n  }\n  get controlNombre() {\n    return this.formularioGroup.controls['nombre'];\n  }\n  get controlApellido() {\n    return this.formularioGroup.controls['apellido'];\n  }\n  get costoAproximado() {\n    return this.formularioGroup.controls['costoAproximado'];\n  }\n  get controlContacto() {\n    return this.formularioGroup.controls['contacto'];\n  }\n  get controlMarca() {\n    return this.formularioGroup.controls['marca'];\n  }\n  get controlModelo() {\n    return this.formularioGroup.controls['modelo'];\n  }\n};\nUserComponent = __decorate([Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})], UserComponent);\nexport { UserComponent };","map":{"version":3,"mappings":"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","names":["Component","UserComponent","constructor","presService","marcaService","modeloService","router","formBuilder","Subscription","ngOnInit","formularioGroup","group","nombre","Validators","minLength","maxLength","required","apellido","costoAproximado","contacto","email","marcaSeleccionadaId","modeloSeleccionadoId","presupuesto","Presupuesto","subscription","add","traerMarcas","subscribe","next","listado","marcas","error","alert","get","valueChanges","x","console","log","value","getModelos","respuesta","modelos","guardar","valid","agregar","irAListado","cancelar","navigate","controlNombre","controls","controlApellido","controlContacto","controlMarca","controlModelo","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\magal\\OneDrive\\Documents\\GitHub\\Farm-FoodNutricion\\Frontend\\Farm&FoodNutricion-FENuevo\\FarmFoodNutricion\\src\\app\\Componentes\\user\\user.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Usuario } from 'src/app/Interfaces/usuario';\nimport { UsuarioService } from 'src/app/Services/Usuario/Usuario/usuario.service';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent {\n\n  formularioGroup: FormGroup;\n  presupuesto: Presupuesto;\n  marcas: Marca[];\n  modelos:  Modelo[];\n\n  private subscription = new Subscription();\n  constructor(\n    private presService: PresupuestoService,\n    private marcaService: MarcaService,\n    private modeloService: ModeloService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n\n    this.formularioGroup= this.formBuilder.group({\n      nombre: ['', [Validators.minLength(3), Validators.maxLength(100), Validators.required]],\n      apellido: ['', [Validators.minLength(3), Validators.maxLength(80), Validators.required]],\n      costoAproximado: [],\n      contacto: ['', [Validators.email,Validators.required]],\n      marcaSeleccionadaId: ['', Validators.required],\n      modeloSeleccionadoId: ['', Validators.required]\n    })\n\n    this.presupuesto = new Presupuesto();\n\n    this.subscription.add(\n      this.marcaService.traerMarcas().subscribe({\n        next: (listado: Marca[]) => {\n          this.marcas = listado;\n        },\n        error: () => {\n          alert('error al obtener marcas');\n        },\n      })\n    );\n\n    this.formularioGroup.get(\"marcaSeleccionadaId\")?.valueChanges.subscribe((x: string) => {\n      console.log('marca value changed')\n      console.log(x)\n      console.log(this.formularioGroup.get(\"marcaSeleccionadaId\")?.value)\n\n\n      this.subscription.add(\n      this.modeloService.getModelos(x).subscribe({\n\n        next: (respuesta: Modelo[]) => {\n          this.modelos = respuesta;\n        },\n        error: () => {\n          alert('error al comunicarse con la API');\n          },\n        }),\n        );\n  \n      })\n  }\n\n  guardar() {\n    if (this.formularioGroup.valid) {\n      this.subscription.add(\n        this.presService.agregar(this.presupuesto).subscribe({\n          next: () => {\n            this.irAListado();\n          },\n          error: () => {\n            alert('error al guardar');\n          },\n        })\n      );\n    }\n  }\n\n  cancelar() {\n    this.irAListado();\n  }\n\n  private irAListado() {\n    this.router.navigate(['']);\n  }\n\n  get controlNombre() : FormControl{\n    return this.formularioGroup.controls['nombre'] as FormControl\n  }\n\n  get controlApellido() : FormControl{\n    return this.formularioGroup.controls['apellido'] as FormControl\n  }\n\n  get costoAproximado() : FormControl{\n    return this.formularioGroup.controls['costoAproximado'] as FormControl\n  }\n\n  get controlContacto() : FormControl{\n    return this.formularioGroup.controls['contacto'] as FormControl\n  }\n\n  get controlMarca() : FormControl{\n    return this.formularioGroup.controls['marca'] as FormControl\n  }\n\n  get controlModelo() : FormControl{\n    return this.formularioGroup.controls['modelo'] as FormControl\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}