{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/magal/OneDrive/Documents/GitHub/Farm-FoodNutricion/Frontend/Farm&FoodNutricion-FENuevo/FarmFoodNutricion/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { Usuario } from 'src/app/Interfaces/usuario';\nimport Swal from 'sweetalert2';\nlet UserComponent = class UserComponent {\n  constructor(userService, rolService, router, formBuilder) {\n    this.userService = userService;\n    this.rolService = rolService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.usuario = {};\n    this.listaRoles = [];\n    this.subscription = new Subscription();\n    this.cargarRoles();\n  }\n  ngOnInit() {\n    this.formularioGroup = this.formBuilder.group({\n      nombre_apellido: ['', [Validators.minLength(3), Validators.maxLength(100), Validators.required]],\n      usuario: ['', [Validators.minLength(3), Validators.maxLength(80), Validators.required]],\n      password: ['', Validators.required],\n      email: ['', [Validators.email, Validators.required]],\n      id_rol: ['', Validators.required]\n    });\n    this.usuario = new Usuario();\n    // this.subscription.add(\n    //   this.rolService.getAllRoles().subscribe({\n    //     next: (listado: Rol[]) => {\n    //       this.roles = listado;\n    //     },\n    //     error: () => {\n    //       alert('error al obtener roles');\n    //     },\n    //   })\n    // );\n  }\n\n  cargarRoles() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.subscription.add(_this.rolService.getAllRoles().subscribe(data => {\n        if (data.ok) {\n          _this.listaRoles = data.listaRoles;\n          alert(_this.listaRoles[0].nombreRol);\n        } else {\n          Swal.fire({\n            title: 'Error al obtener el listado de roles',\n            icon: 'error',\n            confirmButtonText: \"Ok\"\n          });\n        }\n      }));\n    })();\n  }\n  guardar() {\n    if (this.formularioGroup.valid) {\n      this.subscription.add(this.userService.postCreate(this.usuario).subscribe({\n        next: () => {\n          this.irAHome();\n        },\n        error: () => {\n          alert('error al guardar');\n        }\n      }));\n    }\n  }\n  cancelar() {\n    this.irAHome();\n  }\n  irAHome() {\n    this.router.navigate(['']);\n  }\n  get controlNombre() {\n    return this.formularioGroup.controls['nombre_apellido'];\n  }\n  get controlUsuario() {\n    return this.formularioGroup.controls['usuario'];\n  }\n  get controlPassword() {\n    return this.formularioGroup.controls['password'];\n  }\n  get controlEmail() {\n    return this.formularioGroup.controls['email'];\n  }\n  get controlRol() {\n    return this.formularioGroup.controls['id_rol'];\n  }\n};\nUserComponent = __decorate([Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})], UserComponent);\nexport { UserComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","Subscription","Usuario","Swal","UserComponent","constructor","userService","rolService","router","formBuilder","cargarRoles","ngOnInit","formularioGroup","group","nombre_apellido","minLength","maxLength","required","usuario","password","email","id_rol","subscription","add","getAllRoles","subscribe","data","ok","listaRoles","alert","nombreRol","fire","title","icon","confirmButtonText","guardar","valid","postCreate","next","irAHome","error","cancelar","navigate","controlNombre","controls","controlUsuario","controlPassword","controlEmail","controlRol","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\magal\\OneDrive\\Documents\\GitHub\\Farm-FoodNutricion\\Frontend\\Farm&FoodNutricion-FENuevo\\FarmFoodNutricion\\src\\app\\Componentes\\user\\user.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { ComandoRoles } from 'src/app/Interfaces/comandoRoles';\nimport { Rol } from 'src/app/Interfaces/rol';\nimport { Usuario } from 'src/app/Interfaces/usuario';\nimport { RolService } from 'src/app/Services/Usuario/Rol/rol.service';\nimport { UsuarioService } from 'src/app/Services/Usuario/Usuario/usuario.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent {\n\n  formularioGroup: FormGroup;\n  usuario: Usuario = {} as Usuario;\n  listaRoles: any = [];\n  \n  private subscription = new Subscription();\n  roles: Rol[];\n\n  constructor(\n    \n    private userService: UsuarioService,\n    private rolService: RolService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { \n    this.cargarRoles();\n  }\n\n  ngOnInit(): void {\n    \n\n    this.formularioGroup= this.formBuilder.group({\n      nombre_apellido: ['', [Validators.minLength(3), Validators.maxLength(100), Validators.required]],\n      usuario: ['', [Validators.minLength(3), Validators.maxLength(80), Validators.required]],\n      password: ['', Validators.required],\n      email: ['', [Validators.email,Validators.required]],\n      id_rol: ['', Validators.required]\n    })\n\n    this.usuario = new Usuario();\n\n    // this.subscription.add(\n    //   this.rolService.getAllRoles().subscribe({\n    //     next: (listado: Rol[]) => {\n    //       this.roles = listado;\n    //     },\n    //     error: () => {\n    //       alert('error al obtener roles');\n    //     },\n    //   })\n    // );\n\n    \n  }\n  async cargarRoles() {\n    this.subscription.add(\n      this.rolService.getAllRoles().subscribe((data)=>{\n        if(data.ok){\n          this.listaRoles=data.listaRoles;\n          alert(this.listaRoles[0].nombreRol)\n        }\n          \n        else{\n          Swal.fire({\n            title: 'Error al obtener el listado de roles',\n            icon: 'error',\n            confirmButtonText: \"Ok\"\n          });\n        }\n      }  \n      )      \n    );\n  }\n\n  guardar() {\n    if (this.formularioGroup.valid) {\n      this.subscription.add(\n        this.userService.postCreate(this.usuario).subscribe({\n          next: () => {\n            this.irAHome();\n          },\n          error: () => {\n            alert('error al guardar');\n          },\n        })\n      );\n    }\n  }\n\n  cancelar() {\n    this.irAHome();\n  }\n\n  private irAHome() {\n    this.router.navigate(['']);\n  }\n\n  get controlNombre() : FormControl{\n    return this.formularioGroup.controls['nombre_apellido'] as FormControl\n  }\n\n  get controlUsuario() : FormControl{\n    return this.formularioGroup.controls['usuario'] as FormControl\n  }\n\n  get controlPassword() : FormControl{\n    return this.formularioGroup.controls['password'] as FormControl\n  }\n\n  get controlEmail() : FormControl{\n    return this.formularioGroup.controls['email'] as FormControl\n  }\n\n  get controlRol() : FormControl{\n    return this.formularioGroup.controls['id_rol'] as FormControl\n  }\n\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}